!function($){var validators={required:function(input){return"checkbox"===input.type||"radio"===input.type?input.checked:!!input.value.toString().trim()},number:function(input){var number=parseFloat(input.value);return!input.value.toString()||"number"==typeof number&&!isNaN(number)},min:function(input,minValue){return!input.value.toString()||parseFloat(input.value)>=parseFloat(minValue)},max:function(input,maxValue){return!input.value.toString()||parseFloat(input.value)<=parseFloat(maxValue)},email:function(input){return!input.value.toString()||input.value.toString().match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)}},Validator=function(form,options){if(this.$form=$(form),this.errorClass=options.errorClass||"has-error",this.errorWrapper=options.errorWrapper||".form-group",!this.$form.filter("form").length)throw new Error("The element must be a form type");this.$form.on("submit",this.validateForm.bind(this))};Validator.prototype.validateForm=function(event){var valid=!0;this.findInputs().each(function(index,input){var i,key,validator,keyWordCase,validatorValue,$input=$(input),validatorKeys=Object.keys(validators),fieldValid=!0;for(i=0;i<validatorKeys.length;i++)key=validatorKeys[i],validator=validators[key],keyWordCase=key.replace(/(^.|[^a-z0-9][a-z0-9])/i,function(v){return v.replace(/[^a-z0-9]/i,"").toUpperCase()}),validatorValue=$input.data("validate"+keyWordCase),"undefined"!=typeof validatorValue&&(fieldValid=fieldValid&&validator(input,validatorValue));valid=valid&&fieldValid,this.setInputStatus(input,fieldValid)}.bind(this)),valid||event.preventDefault()},Validator.prototype.setInputStatus=function(input,valid){var $input=$(input),$wrapper=this.errorWrapper&&$input.closest(this.errorWrapper);$wrapper&&$wrapper.length?$wrapper[valid?"removeClass":"addClass"](this.errorClass):$input[valid?"removeClass":"addClass"](this.errorClass)},Validator.prototype.findInputs=function(){return this.$form.find("input,textarea,select")},$.fn.validateForm=function(opt){return this.each(function(){var options,$element=$(this),toggler=$element.data("jqmv");toggler||(options=Object.assign({},$element.data(),opt||{}),toggler=new Validator(this,options),$element.data("jqmv",toggler))})}}(window.jQuery),function($){function checkValid(option,list,value,required){if(!value){if(!required)return;checkRequired(option)}if(list.indexOf(value)===-1)throw new Error("Invalid value %s for option %s. Available values are %s".replace("%s",value).replace("%s",option).replace("%s",list.join(", ")))}function checkRequired(option,value){if(!value)throw new Error("The option %s is required!".replace("%s",option))}function Toggler(element,options){this.$element=$(element),this.options=Object.assign({},Toggler.defaults,options||{}),this.visible=!1,checkRequired("class",this.options.class),checkValid("mode",validToggleModes,this.options.mode),checkValid("event",validToggleEvents,this.options.event),this.mode=this.options.mode,this.event=this.options.event,this.delay=parseInt(this.options.delay,10)||0,this.$root=this.$element.closest(this.options.parent),this.$root.length||(this.$root=$(this.options.parent)),this.$target=this.$root.find(this.options.target||element),this.$others=this.options.others&&this.$root.find(this.options.others).not(this.$target),this.class=this.options.class,this.altClass=this.options.altClass,this.init()}var validToggleModes=["toggleClass","addClass","removeClass","collapse"],validToggleEvents=["click","hover","mouseover","mouseout","mousedown","mouseup","visible","first-visible"],otherModes={collapse:"removeClass",toggleClass:"toggleClass",addClass:"removeClass",removeClass:"addClass"};Toggler.prototype.init=function(action){switch(this.event){case"visible":this.listenScroll(function(show,hide){show&&this.handleClass("addClass"),hide&&this.handleClass("removeClass")}.bind(this));break;case"first-visible":this.listenScroll(function(show,hide){show&&(this.handleClass(this.mode),this.unlistenScroll())}.bind(this));break;case"hover":this.$element.on({"mouseover.jqmt":function(){this.handleClass("addClass")}.bind(this),"mouseout.jqmt":function(){this.handleClass("removeClass")}.bind(this)});break;default:this._handleEvent=function(event){this.handleClass(this.mode)}.bind(this),this.$element.on(this.event+".jqmt",this._handleEvent)}},Toggler.prototype.listenScroll=function(fn){this.unlistenScroll(),this._scrollListener=function(event){var visible=this.isVisible();this.visible!==visible&&fn(visible,!visible),this.visible=visible}.bind(this),$(window).on("scroll resize",this._scrollListener).trigger("resize")},Toggler.prototype.unlistenScroll=function(){this._scrollListener&&($(window).off("scroll resize",this._scrollListener),this._scrollListener=null)},Toggler.prototype.isVisible=function(){var docViewTop=$(window).scrollTop(),docViewBottom=docViewTop+$(window).height(),elemTop=this.$element.offset().top,elemBottom=elemTop+this.$element.height();return elemBottom<=docViewBottom&&elemTop>=docViewTop},Toggler.prototype.handleClass=function(mode){var $target=this.$target,$others=this.$others,othersMode=otherModes[mode],className=this.class,altClassName=this.altClass;this.delay;$target.each(function(index,el){var $target=$(el),delay=$target.data("delay")?parseInt($target.data("delay"),10):this.delay,doIt=function($target,mode){if($target&&$target.length)switch(mode){case"collapse":case"toggleClass":$target.toggleClass(className),altClassName&&($target.hasClass(className)?$target.removeClass(altClassName):$target.addClass(altClassName));break;case"addClass":$target.addClass(className),altClassName&&$target.removeClass(altClassName);break;case"removeClass":$target.removeClass(className),altClassName&&$target.addClass(altClassName)}};setTimeout(function(){doIt($target,mode),doIt($others,othersMode)}.bind(this),delay)}.bind(this))},Toggler.defaults={mode:"toggleClass",event:"click",parent:"body"},$.fn.masterToggler=function(opt){return this.each(function(){var options,$element=$(this),toggler=$element.data("jqmt");toggler||(options=Object.assign({},$element.data(),opt||{}),toggler=new Toggler(this,options),$element.data("jqmt",toggler))})}}(window.jQuery);